#!/bin/pwsh

param(
	[Parameter(Mandatory=$true, HelpMessage="Ruta del archivo de la matriz")]
	[ValidateNotNull()]
	[string]$matriz,
	[Parameter(Mandatory=$false, HelpMessage="Valor entero para utilizarse en el producto escalar. No se puede usar junto con -t o -trasponer")]
	[int]$producto,
	[Parameter(Mandatory=$false, HelpMessage="Indica que se debe realizar la operación de trasposición sobre la matriz. (no recibe valor adicional, solo el parámetro) No se puede usar junto a –p o –producto.")]
	[bool]$trasponer,
	[Parameter(Mandatory=$true, HelpMessage="Carácter para utilizarse como separador de columnas")]
	[ValidateNotNull()]
	[string]$separador = "|"
)

if ($separador -eq "-")
{
	Write-Output "El separador - es invalido"
	Exit
}

if ( ($producto -eq 0) -and ( -not $trasponer) ) {
	Write-Output "necesita indicar una operacion, ya sea trasponer o producto"
	Exit
}

if ( ($producto -ne 0) -and ($trasponer) ) {
	Write-output "no se puede trasponer y hacer producto"
	Exit
}

if (-not (Test-Path $matriz)) {
    Write-Output "El archivo especificado no existe."
    Exit
}

if ((Get-Content $matriz | Measure-Object -Line).Lines -eq 0) {
    Write-Output "El archivo está vacío."
    Exit
}


$escapedDelimiter = [regex]::Escape($separador)

#aca arranca la validacion y generación de la matriz

$matrix = @()
$expectedColumnCount = $null
$lineNumber = 0

Get-Content $matriz | ForEach-Object {
    $lineNumber++
    $columns = ($_ -split $escapedDelimiter)
    
    # Validar que todos los valores sean enteros
    foreach ($value in $columns) {
        if (-not ($value -match '^-?\d+$')) {
            Write-Output "Valor inválido en la línea $lineNumber '$value' no es un número entero."
            Exit
        }
    }

    if (-not $expectedColumnCount) {
        $expectedColumnCount = $columns.Count
    }
    elseif ($columns.Count -ne $expectedColumnCount) {
        Write-Output "La matriz no está bien formada: la línea $lineNumber tiene una cantidad distinta de columnas."
        Exit
    }

    $row = $columns | ForEach-Object { [int]$_ }
    $matrix += ,$row
}

# Validar que la matriz sea cuadrada si quieres esta restricción
if ($matrix.Count -ne $expectedColumnCount) {
    Write-Output "La matriz no es cuadrada. Tiene $($matrix.Count) filas y $expectedColumnCount columnas."
    Exit
}

#aca termina la validacion y la generación


if ($producto -ne 0) {
    $resultado = $matrix | ForEach-Object {
        $fila = $_ | ForEach-Object { $_ * $producto }
        ,$fila  # mantiene la estructura en forma de matriz (array de arrays)
    }
}

if ($trasponer) {
    # Obtener cantidad de filas y columnas
    $rowCount = $matrix.Count
    $colCount = $matrix[0].Count

    $resultado = @()
    for ($i = 0; $i -lt $colCount; $i++) {
        $newRow = @()
        for ($j = 0; $j -lt $rowCount; $j++) {
            $newRow += $matrix[$j][$i]
        }
        $resultado += ,$newRow
    }	
}


#obtener el path del archivo de input para generar el de salida independientemente de donde esté
$filename = [System.IO.Path]::GetFileName($matriz)
$salida = "salida.$filename"  
$resultado | ForEach-Object { $_ -join $separador } | Out-File -FilePath $salida
